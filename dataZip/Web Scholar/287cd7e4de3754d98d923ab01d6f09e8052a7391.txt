1
MONA: An Efficient and Scalable Strategy for
Targeted k-Nodes Collapse
Yuqian Lv, Bo Zhou, Jinhuan Wang, Shanqing Yu, and Qi Xuan, Senior Member, IEEE
Abstract —The concept of k-core plays an important role
in measuring the cohesiveness and engagement of a network.
And recent studies have shown the vulnerability of k-core
under adversarial attacks. However, there are few researchers
concentrating on the vulnerability of individual nodes within k-
core. Therefore, in this paper, we attempt to study T argeted k-
Nodes Collapse P roblem (TNsCP), which focuses on removing a
minimal size set of edges to make multiple target k-nodes collapse.
For this purpose, we first propose a novel algorithm named MOD
for candidate reduction. Then we introduce an efficient strategy
named MONA, based on MOD, to address TNsCP. Extensive
experiments validate the effectiveness and scalability of MONA
compared to several baselines. An open-source implementation
is available at https://github.com/Yocenly/MONA .
Index Terms —k-core decomposition, k-core robustness, Adver-
sarial attack, Edge removal, Graph data mining.
I. I NTRODUCTION
NETWORKS or graphs have become integral parts of our
daily lives, playing significant roles in various complex
systems, e.g., social networks, biological networks, and trans-
port networks. Due to simplicity and efficiency, the concept
ofk-core has gained prominence as a crucial metric for
capturing the structural engagement of networks. The k-core
is a maximal induced subgraph where each node has its degree
of at least k. The presence of nodes in k-core depends on their
neighboring relationships in the subgraph. Thus, removing a
subset of nodes or edges from the k-core may result in the
detachment of other nodes within it. For example, Zhou et
al. [1] discovered that the removal of a small number of
edges may severely devastate the structure of the k-core. And
Chen et al. [2] focused on the k-core minimization problem
and proposed effective algorithms to cover it. Medya et al.
[3] employed the Shapley value, a cooperative game-theoretic
concept, to address the problem of k-core minimization.
This work was supported in part by the Key R&D Program of Zhe-
jiang under Grants 2022C01018 and 2021C01117, by the National Natu-
ral Science Foundation of China under Grants 62103374, 61973273 and
U21B2001, by the National Key R&D Program of China under Grants
2020YFB1006104, and by the Major Key Project of PCL under Grants
PCL2022A03, PCL2021A02, and PCL2021A09.
Y . Lv, B. Zhou, J. Wang and S. Yu are with the Institute of Cyberspace
Security, College of Information Engineering, Zhejiang University of Tech-
nology, Hangzhou 310023, China.
B. Zhou is also with the Department of Intelligent Control, Zhejiang
Institute of Communications, Hangzhou 311112, China.
Q. Xuan is with the Institute of Cyberspace Security, College of Information
Engineering, Zhejiang University of Technology, Hangzhou 310023, China,
with the PCL Research Center of Networks and Communications, Peng Cheng
Laboratory, Shenzhen 518000, China, and also with the Utron Technology
Co., Ltd. (as Hangzhou Qianjiang Distinguished Expert), Hangzhou 310056,
China (e-mail: xuanqi@zjut.edu.cn).
2
-
node
3
-
node
1
-
node
𝑢
4
𝑢
5
𝑢
6
𝑢
7
𝑢
9
𝑢
8
𝑢
10
𝑢
11
𝑢
12
𝑢
13
𝑢
15
𝑢
14
𝑢
1
𝑢
16
𝑢
17
𝑢
2
𝑢
3
𝑢
19
𝑢
20
𝑢
18
3
-
core after the collapse of 
𝒖
𝟔
 
and 
𝒖
𝟏𝟒
Original 3
-
core
Backtrack for 
𝑛
7
3
2
2
1
1
1
1
3
-
core
3
1
1
1
1
2
2
𝑛
1
𝑛
2
𝑛
7
𝑛
7
𝑛
6
𝑛
5
𝑛
4
𝑛
3
𝑛
2
𝑛
1
𝑛
3
𝑛
4
𝑛
6
𝑛
5Fig. 1. Example graph for introducing motivations.
Motivations. Despite the effectiveness of above mentioned
methods, they all attack the k-core from a global perspec-
tive. They pay little attention to the perturbations that affect
individual nodes in the k-core. According to the research of
Zhang et al. [4], the removal of critical nodes in k-core may
significantly break down network engagement. However, the
perturbations of removing nodes are infeasible in practice and
may result in detectable consequences. Thus, for the sake of
concealment and feasibility, we make the attempt to identify
the critical edges whose removals will trigger the detachment
of given target nodes from the k-core. In other words, given
a set of target nodes in k-core, our objective is to remove a
minimal-size set of edges such that all target nodes are absent
from k-core. We refer to this problem as T argeted k-Nodes
Collapse P roblem (TNsCP).
Example 1. We assume a social network in Figure. 1, where
nodes and edges represent the users and their relationships.
Users with a high significance usually exert great attraction
to others. In the k-core model, the significance of users is
assessed by the k-core they belong to, e.g., users in 3-core
are usually more important than those just in 2-core. It can
be realized that the absence of u6andu14from 3-core will
greatly reduce the number of users in 3-core, from 15 users to
4 users. With prior knowledge, we find that the breakdown of
only two relationships, for example ( u4,u7) and ( u16,u18),
will truly achieve this purpose.
Research on TNsCP contributes to the understanding of
node vulnerability in the k-core model and enables maintainers
to safeguard critical relationships among users. Furthermore,
this study helps to diminish the importance of confidential
users, making them less noticeable to potential attackers.
Contributions. In this paper, we provide the general defi-
nition of TNsCP with proof of its NP-hardness. Then, we in-
troduce a novel algorithm named MOD for effective candidatearXiv:2308.09601v1  [cs.SI]  18 Aug 20232
reduction. Furthermore, we propose a novel heuristic algorithm
named MONA to address TNsCP. We exhibit the effectiveness
of MONA compared with several baselines. Finally, we show
the high scalability of MONA compared with those global
attack methods.
II. P RELIMINARIES AND PROBLEM STATEMENT
In this paper, we denote a graph as G= (V, E), where
VandErepresent the sets of nodes and edges respectively.
Note that we only focus on unweighted and undirected graphs
without self-loops. We use d(u,G)andN(u,G)to represent the
degree and neighbors of uinG, respectively. In this section,
we introduce some essential definitions and concepts.
Definition 1. k-core. Given a graph Gand a positive integer
k, itsk-core, denoted as Gk= (Vk, Ek)where Vk⊆Vand
Ek⊆E, means the maximal induced subgraph where each
node u∈Gkoccupies at least kneighbors.
Definition 2. Core Number. Given a graph Gand a node
u∈G, the core number of u, denoted as C(u,G), is the largest
k, such that u∈Gkwhile u /∈Gk+1.
In this work, nodes with the same core number of kare
called k-nodes . And if the core number of a node udecreases
after edge removal, we refer to this event as the collapse of
u. Generally, once a set of edges Eis removed from G, it
may lead to the collapse of multiple nodes in Gdue to the
domino phenomenon of the k-core [5]. These nodes are called
followers of EinG, denoted as F(E, G). Assuming G′=
G\ E= (V′, E′), we obtain F(E, G) =Vk\V′
k.
Problem Statement. Given a graph Gand a set of target k-
nodesT ∈Vk\Vk+1, the T argeted k-Nodes Collapse P roblem
(TNsCP) aims to remove a minimal-size set of edges E ∈E
to make all nodes in Tcollapse, i.e., T ⊆ F (E, G).
Theorem 1. The TNsCP is NP-hard.
Proof. We try to reduce the Set Covering Problem (SCP) to the
TNsCP. In the SCP, two sets are given: a universe set U, and
a setSthat contains subsets of U. The union of all subsets in
Scould cover U. Then the SCP concerns finding the smallest
number of subsets from Sto cover the entire universe [6].
Here, for a given graph Gand a set of target k-nodes T, we
define U=TandS=E. It is important to note that Sitself
does not represent the set of subsets of U. Therefore, we utilize
the follower function F(·, G)to map StoU. For example,
for an element s∈S, we have F(s, G)∩U⊆U. It becomes
evident that F(S, G)∩U=U. After that, the TNsCP aims to
find a minimal-size set E ⊆Ssuch that F(E, G)∩U=U.
Thus, we have successfully reduced the SCP to TNsCP. Since
the NP-hardness of the SCP [6], it follows that the TNsCP is
also NP-hard.
Theorem 2. Given a graph Gand an edge (u, v)∈E.
Removal of (u, v)could make the k-nodes collapse if and
only if min(d(u,Gk), d(v,Gk)) =k.
Theorem 3. Given a graph Gand an edge (u, v)∈E. Assume
thatk=C(u,G)≤C(v,G), only those nodes with the coreAlgorithm 1: Optimal( G,T)
input : given graph G, target k-nodes T;
output: removed edges E.
1P ← { (u, v)|(u, v)∈E, min (C(u,G), C(v,G)) =k};
2foriter←1to|P|do
3 combs ←All combinations of size iter inP;
4 foreach E ∈combs do
5 ifT ⊆ F (E, G)then return E;
number of kmay collapse after the removal of (u, v), and
their core number will decrease at most 1.
The proofs of Theorem 2 and Theorem 3 are omitted here
because they have already been established by [7] and by
[8], [9], respectively. Then, on the basis of Theorem 2 and
Theorem 3, we have the following observation.
Observation 1. Those edges included in P={(u, v)|(u, v)∈
E, min (C(u,G), C(v,G)) =k}are what matter in the collapse
ofk-nodes.
Proof. Given a graph Gand an edge (u, v)∈Ethat satisfies
min(d(u,Gk), d(v,Gk)) = k, the followers of (u, v)are the
subset of knodes, that is, F({(u, v)}, G)⊆Vk\Vk+1.
After the removal of (u, v), all these followers will absolutely
collapse from k-core to (k−1)-core. Additionally, the col-
lapse of F({(u, v)}, G)will trigger the emergence of more
edges that satisfy Theorem 2. Following the procedure, we
can iteratively remove these compliant edges until no more
edges satisfy Theorem 2 in the graph. In such a scenario,
it implies that there are no nodes with the core number of
kin the graph, indicating the complete collapse of the k-
nodes. And all the edges removed in this procedure are part
ofP={(u, v)|(u, v)∈E, min (C(u,G), C(v,G)) =k}.
Based on Observation 1, we can initially narrow the candi-
date edges from EtoP.
III. M ETHODOLOGIES
A. Optimal Solution
Assuming that we have prior knowledge of F({e}, G), the
removal of {e}is the optimal solution when our target nodes
are within F({e}, G). Therefore, a naive solution for TNsCP is
to exhaustively enumerate all possible combinations of edges
inPand select the best for removal. As shown in Algorithm
1, we explore each edge combination in P, with its size
ranging from 1 to |P|. The time complexity of Algorithm 1 is
O(P|P|
i=1 |P|
i
|Ek|), which is extremely time-consuming and
unscalable with increasing input size. Due to the constraints
of computational resources, it is not feasible to enumerate
the followers generated by all possible edge combinations.
Therefore, identifying the candidate edges that may cause the
collapse of the target k-nodes Tposes a challenge.
B. Improved Candidate Reduction
Motivated by the above challenge, in this part, we present
two novel algorithms to improve candidate reduction.3
Algorithm 2: MOD( G,k)
input : given graph G, core number constraint k;
output: modified onion distribution M.
1layer←0;˜G←Gk;S ← { u|u∈G, C (u,G)=k};
2whileSis not empty do
3 layer←layer + 1;
4 equal← {u|u∈˜G, deg (u,˜G) =k};
5 lower ← {u|u∈˜G, deg (u,˜G)< k};
6 if|lower|>0thenequal← ∅;
7 foreach v∈lower ∪equal do
8 Mv←layer ;
9S ← S \ { lower ∪equal};
10 ˜G←˜G\ {lower ∪equal};
11return M;
2
-
node
3
-
node
1
-
node
𝑢
4
𝑢
5
𝑢
6
𝑢
7
𝑢
9
𝑢
8
𝑢
10
𝑢
11
𝑢
12
𝑢
13
𝑢
15
𝑢
14
𝑢
1
𝑢
16
𝑢
17
𝑢
2
𝑢
3
𝑢
19
𝑢
20
𝑢
18
3
-
core after the collapse of 
𝒖
𝟔
 
and 
𝒖
𝟏𝟒
Original 3
-
core
Backtrack for 
𝑛
7
3
2
2
1
1
1
1
3
-
core
3
1
1
1
1
2
2
𝑛
1
𝑛
2
𝑛
7
𝑛
7
𝑛
6
𝑛
5
𝑛
4
𝑛
3
𝑛
2
𝑛
1
𝑛
3
𝑛
4
𝑛
6
𝑛
5
Fig. 2. Example for MOD and BacktrackTree algorithms. All 2-nodes are
assigned by MOD (left) and n7is backtracked by BacktrackTree (right).
Given a k-node u, the collapse of umay trigger the collapse
of other k-nodes in its neighbors. Therefore, when our target
nodes are among the collapsed neighbors of u, it is prioritized
to make ucollapse. This necessitates further classification of
k-nodes to distinguish them with different collapse orders.
Inspired by O nion D ecomposition (OD) [10], we propose
Modified O nion D ecomposition (MOD) to divide k-nodes of
Ginto different layers, which are illustrated in Algorithm 2.
The main difference between OD and MOD is that OD
removes all nodes with degrees less than or equal to kin each
iteration. For MOD, in Algorithm 2, we further divide these
nodes into equal andlower (Lines 4-5). If there are nodes
with degrees less than k, we set equal to an empty set (Line
6) and then assign nodes in lower withlayer (Lines 7-8).
Otherwise, nodes in equal are assigned. Then, we update S
and˜G(Lines 9-10). Finally, the modified onion distribution of
k-nodes Mis returned . The lower the layer of a k-node in M,
the higher its priority in the collapse order. For example, we
execute Algorithm 2 for 2-nodes in Figure 2 (left). The number
marked on each node represents its modified onion layer. In the
first iteration, we remove equal ={n1, n3, n4, n6}and assign
them to layer = 1. Then, lower ={n2, n5}andlower =
{n7}are removed in order and assigned with layer = 2 and
layer = 3, respectively.
Given a target k-node u, we could prioritize the collapse
of its neighbors with higher collapse orders according to M.
Furthermore, we can iteratively backtrack on those neighbors
that maintain increasing collapse orders with respect to the
current node. As shown in Algorithm 3, we exploit the Breadth
First Search (BFS) algorithm for this backtracking procedure.
In each iteration, we extract those neighbors with higher
collapse orders, denoted as neighbors (Lines 4-5). Then theAlgorithm 3: BacktrackTree( G,T)
input : given graph G, target k-nodes T;
output: backtrack tree GBT.
1M ← MOD (G,k);queue ← T ;
2GBT←a directed graph (T,∅);
3foreach u∈queue do
4 nodes ← {v|v∈N(u, Gk), C(v,Gk)=k};
5 neighbors ← {v|v∈nodes, Mv<Mu};
6 queue ←queue ∪(neighbors \VBT);
7 GBT←GBT∪ {(u, v)|v∈neighbors };
8return GBT;
BFS queue queue is updated (line 6) and the edges that link
the current node with its neighbors are added to GBT(line 7).
Note that GBTis a directed graph initialized with nodes in T
and empty edges (Line 2). For example, as shown in Figure 2
(right), we execute Algorithm 3 with the setting of n7as the
target. We obtain GBTwith 7 nodes and 6 directed edges.
We can realize that those nodes in VBTare most probably
related to the collapse of T. And the removal of the edges in
EBTwill lead to the collapse of the nodes in VBT. However,
the edges in EBTare not sufficient to cover the collapse of T
when nodes in Tare assigned in equal during Algorithm 2.
Therefore, EBTis augmented by the adjacent edges of Tin
Gk. In this way, we obtain the set of candidate edges, denoted
asH=EBT∪{(u, v)|u∈ T, v∈N(u, Gk)\VBT}. It can be
seen that H ⊆ P . Therefore, we further improve the candidates
fromPtoH.
Complexity. The time complexities of Algorithm 2 and
Algorithm 3 are both O(|Vk\Vk+1|). Additionally, both
algorithms have a space complexity of O(|Gk|).
C. MONA Algorithm
Benefiting from the improved candidates H, in this part, we
propose a novel heuristic algorithm to tackle TNsCP, named
Modified O nion based k-Nodes A ttack (MONA).
Pruned Followers. Given an edge e∈ H , the removal
ofehas two main impacts. First, as discussed before, the
removal of ecan trigger the collapse of the nodes in G, that
is,F({e}, G). In addition, the removal of emay result in
the zero-degree of nodes in GBT. These nodes will no longer
appear in GBTduring the backtracking process of Algorithm
3. This process is analogous to pruning a branch from a tree,
causing all the leaves on that branch to detach from the tree.
For example, as shown in Figure 2 (right), those nodes in the
shadow area, i.e., n1,n2andn3, will absolutely be pruned
after the removal of edge (3,2). These nodes will disappear
inGBTduring the re-backtrack process. We integrate these
two impacts and introduce the concept of pruned followers
Fp(e)to measure the impact of removing e. The operations
for obtaining Fp(e)is presented in Algorithm 4. Note that we
bypass those zero-degree nodes contained in T.
We exhibit the details of the MONA algorithm in Algorithm
5. In Line 2 and Line 3, we first initialize GBTandH. In Line
4 to Line 8, we iteratively remove the edge with the most
pruned followers and then update GBTandHaccording to
the adversarial graph Gk\ E.4
Algorithm 4: PruneEdge( G,GBT,e,T)
input : given graph G, backtrack tree GBT, removed
edgee, target k-nodes T;
output: pruned followers Fp(e).
1˜G←GBT\ {e};Fp← F ({e}, G)∩VBT;
2while exist zero-indegree nodes in ˜V\ Tdo
3Z ← All zero-indegree nodes in ˜V\ T;
4 ˜G←˜G\ Z;Fp← F p∪ Z;
5return Fp(e);
Algorithm 5: MONA( G,T)
input : given graph G, target k-nodes T;
output: removed edges E.
1E ← ∅ ;GBT←BacktrackTree (Gk,T);
2H ← EBT∪ {(u, v)|u∈ T, v∈N(u, Gk)\VBT};
3whileT ̸⊆ F (E, G)do
4 foreach e∈ H do
5 Fp(e)←PruneEdge (Gk\ E,GBT,e,T);
6 e⋆←The edge with most pruned followers;
7E ← E ∪ { e⋆}; Update GBTandHwithGk\ E;
8return E;
Complexity. The time complexities of Algorithm 4 and
Algorithm 5 are O(|VBT|+|Ek|)andO(|Vk\Vk+1|+|H| ·
|VBT|+|H|·|Ek|), respectively. Additionally, both algorithms
have a space complexity of O(|Gk|).
IV. E XPERIMENTS
A. Experimental Settings
Datasets. Basic properties of used datasets are presented in
Table I. All these datasets are collected from [11]. Note that all
networks are converted to undirected and unweighted graphs
without self-loops.
TABLE I
BASIC PROPERTIES OF USED DATASETS ,WHERE davg IS THE AVERAGE
DEGREE AND kmax IS THE MAXIMAL CORE NUMBER .
Dataset |V| | E|davg kmax |Vkmax| |Ekmax|
USAir 332 2,126 12.81 26 35 539
DeezerEU 28,281 92,752 6.56 12 71 564
Crawl 1,112,702 2,278,852 4.10 18 725 11,522
YouTube 1,134,890 2,987,624 5.27 51 845 36,363
Lastfm 1,191,805 4,519,330 7.58 70 597 35,153
Wikipedia 1,864,433 4,507,315 4.84 66 324 16,054
Roadnet 1,957,027 2,760,388 2.82 3 4,454 7,393
Talk 2,394,385 4,659,565 3.89 131 700 73,503
Patent 3,774,768 16,518,947 8.75 64 106 4,043
Livejournal 4,033,137 27,933,062 13.85 213 214 22,791
Baselines. The following baseline methods are considered
for evaluations and comparisons with our proposed method.
•Random randomly removes an edge from Pin each
iteration until all nodes in Tcollapse.
•Degree removes the edge with the lowest degree (the
sum of the degrees of its endpoints in Gk) inPin each
iteration until all nodes in Tcollapse.•COREATTACK [1] iteratively removes the edge with
most followers in Gkmaxuntil all kmax-nodes collapse.
•KC-Edge [7] iteratively removes the edge with most
followers in Gkuntil its perturbation budget pis fulfilled
orGkis empty.
All programs are implemented in Python 3.7.11. All exper-
iments are carried out on a machine equipped with Intel(R)
Xeon(R) Gold 5218R CPU @2.10GHz and Linux Ubuntu
20.04.4. Note that we select the top-bnodes with the highest
degree within Gkmaxas our target nodes T. And Random is
performed 100 times independently for each task and the mean
value is recorded.
B. Effectiveness of Improved Candidate Reduction
To evaluate the effectiveness of the improved candidate
reduction proposed in Section III, we first compare the number
of candidate edges utilized by Optimal and MONA, i.e.
|P|and|H|. We implement these two algorithms in USAir
and DeezerEU with bvarying from 2 to 10. As shown in
Figure 3(a) and 3(b), a notable distinction is observed in their
candidate sizes. Moreover, to further justify the approximation
guarantee of MONA, we also compare its attack performance,
i.e., the number of removed edges |E|, with that of Optimal.
The results in Figures 3(c) and 3(d) support that MONA could
achieve the optimal solution. Furthermore, we also illustrate
the candidate reduction for the other datasets with the setting
ofb= 30 , which is shown in Figure 3(e).
2
-
node
3
-
node
1
-
node
𝑢
4
𝑢
5
𝑢
6
𝑢
7
𝑢
9
𝑢
8
𝑢
10
𝑢
11
𝑢
12
𝑢
13
𝑢
15
𝑢
14
𝑢
1
𝑢
16
𝑢
17
𝑢
2
𝑢
3
𝑢
19
𝑢
20
𝑢
18
3
-
core after the collapse of 
𝒖
𝟔
 
and 
𝒖
𝟏𝟒
Original 3
-
core
Backtrack for 
𝑛
7
3
2
2
1
1
1
1
3
-
core
3
1
1
1
1
2
2
𝑛
1
𝑛
2
𝑛
7
𝑛
7
𝑛
6
𝑛
5
𝑛
4
𝑛
3
𝑛
2
𝑛
1
𝑛
3
𝑛
4
𝑛
6
𝑛
5
Optima
l
MONA
/uni00000015 /uni00000017 /uni00000019 /uni0000001b /uni00000014/uni00000013
/uni00000045/uni00000014/uni00000013/uni00000014/uni00000014/uni00000013/uni00000015/uni00000014/uni00000013/uni00000016/uni00000031/uni00000058/uni00000050/uni00000045/uni00000048/uni00000055/uni00000003/uni00000052/uni00000049/uni00000003/uni00000026/uni00000044/uni00000051/uni00000047/uni0000004c/uni00000047/uni00000044/uni00000057/uni00000048/uni00000003/uni00000028/uni00000047/uni0000004a/uni00000048/uni00000056
(a) Candidate edges on USAir
/uni00000015 /uni00000017 /uni00000019 /uni0000001b /uni00000014/uni00000013
/uni00000045/uni00000014/uni00000013/uni00000014/uni00000014/uni00000013/uni00000015/uni00000014/uni00000013/uni00000016/uni00000031/uni00000058/uni00000050/uni00000045/uni00000048/uni00000055/uni00000003/uni00000052/uni00000049/uni00000003/uni00000026/uni00000044/uni00000051/uni00000047/uni0000004c/uni00000047/uni00000044/uni00000057/uni00000048/uni00000003/uni00000028/uni00000047/uni0000004a/uni00000048/uni00000056 (b) Candidate edges on DeezerEU
/uni00000015 /uni00000017 /uni00000019 /uni0000001b /uni00000014/uni00000013
/uni00000045/uni00000013/uni00000014/uni00000015/uni00000016/uni00000017/uni00000031/uni00000058/uni00000050/uni00000045/uni00000048/uni00000055/uni00000003/uni00000052/uni00000049/uni00000003/uni00000035/uni00000048/uni00000050/uni00000052/uni00000059/uni00000048/uni00000047/uni00000003/uni00000028/uni00000047/uni0000004a/uni00000048/uni00000056
(c) Removed edges on USAir
/uni00000015 /uni00000017 /uni00000019 /uni0000001b /uni00000014/uni00000013
/uni00000045/uni00000013/uni00000014/uni00000015/uni00000016/uni00000017/uni00000018/uni00000031/uni00000058/uni00000050/uni00000045/uni00000048/uni00000055/uni00000003/uni00000052/uni00000049/uni00000003/uni00000035/uni00000048/uni00000050/uni00000052/uni00000059/uni00000048/uni00000047/uni00000003/uni00000028/uni00000047/uni0000004a/uni00000048/uni00000056 (d) Removed edges on DeezerEU
/uni00000026/uni00000055/uni00000044/uni0000005a/uni0000004f /uni0000003c/uni00000052/uni00000058/uni00000037/uni00000058/uni00000045/uni00000048 /uni0000002f/uni00000044/uni00000056/uni00000057/uni00000049/uni00000050 /uni0000003a/uni0000004c/uni0000004e/uni0000004c/uni00000053/uni00000048/uni00000047/uni0000004c/uni00000044 /uni00000035/uni00000052/uni00000044/uni00000047/uni00000051/uni00000048/uni00000057 /uni00000037/uni00000044/uni0000004f/uni0000004e /uni00000033/uni00000044/uni00000057/uni00000048/uni00000051/uni00000057 /uni0000002f/uni0000004c/uni00000059/uni00000048/uni0000004d/uni00000052/uni00000058/uni00000055/uni00000051/uni00000044/uni0000004f/uni00000014/uni00000013/uni00000015/uni00000014/uni00000013/uni00000016/uni00000014/uni00000013/uni00000017/uni00000014/uni00000013/uni00000018/uni00000031/uni00000058/uni00000050/uni00000045/uni00000048/uni00000055/uni00000003/uni00000052/uni00000049/uni00000003/uni00000026/uni00000044/uni00000051/uni00000047/uni0000004c/uni00000047/uni00000044/uni00000057/uni00000048/uni00000003/uni00000028/uni00000047/uni0000004a/uni00000048/uni00000056
(e) Candidate edges on the rest datasets with b= 30 .
Fig. 3. Effectiveness of improved candidate reduction with different settings
of hyperparameter b.
C. Effectiveness of MONA Algorithm
Furthermore, we evaluate the effectiveness of MONA al-
gorithm with the comparisons of Random and Degree in the5
setting of b= 30 in Figure 4. Specifically, the results in Figure
4(a) illustrate that MONA consistently removes the fewest
edges for the collapse of target nodes across all tested datasets.
It is worth noting that on Livejournal, all three methods end
up with only one edge removed. This is due to the fact that the
Gkmaxof Livejournal is a complete graph, where the removal
of any edge results in the collapse of all kmax-nodes. Since
Random and Degree do not traverse all candidate edges to
find the best one in each iteration, it is not surprising that
they have a lower time complexity than MONA in Figure 4(b).
However, MONA achieves more precise results than Random
and Degree in acceptable time cost. Additionally, Figure 5
presents the number of removed edges under different settings
ofbon Lastfm and Wikipedia. The number of removed edges
clearly increases with increasing bfor MONA. However, the
upward trend becomes slower when breaches 30.
2
-
node
3
-
node
1
-
node
𝑢
4
𝑢
5
𝑢
6
𝑢
7
𝑢
9
𝑢
8
𝑢
10
𝑢
11
𝑢
12
𝑢
13
𝑢
15
𝑢
14
𝑢
1
𝑢
16
𝑢
17
𝑢
2
𝑢
3
𝑢
19
𝑢
20
𝑢
18
3
-
core after the collapse of 
𝒖
𝟔
 
and 
𝒖
𝟏𝟒
Original 3
-
core
Backtrack for 
𝑛
7
3
2
2
1
1
1
1
3
-
core
3
1
1
1
1
2
2
𝑛
1
𝑛
2
𝑛
7
𝑛
7
𝑛
6
𝑛
5
𝑛
4
𝑛
3
𝑛
2
𝑛
1
𝑛
3
𝑛
4
𝑛
6
𝑛
5
Optima
l
MONA
Rando
m
Degree
MONA
/uni00000026/uni00000055/uni00000044/uni0000005a/uni0000004f /uni0000003c/uni00000052/uni00000058/uni00000037/uni00000058/uni00000045/uni00000048 /uni0000002f/uni00000044/uni00000056/uni00000057/uni00000049/uni00000050 /uni0000003a/uni0000004c/uni0000004e/uni0000004c/uni00000053/uni00000048/uni00000047/uni0000004c/uni00000044 /uni00000035/uni00000052/uni00000044/uni00000047/uni00000051/uni00000048/uni00000057 /uni00000037/uni00000044/uni0000004f/uni0000004e /uni00000033/uni00000044/uni00000057/uni00000048/uni00000051/uni00000057 /uni0000002f/uni0000004c/uni00000059/uni00000048/uni0000004d/uni00000052/uni00000058/uni00000055/uni00000051/uni00000044/uni0000004f/uni00000014/uni00000013/uni00000013/uni00000014/uni00000013/uni00000014/uni00000014/uni00000013/uni00000015/uni00000014/uni00000013/uni00000016/uni00000031/uni00000058/uni00000050/uni00000045/uni00000048/uni00000055/uni00000003/uni00000052/uni00000049/uni00000003/uni00000035/uni00000048/uni00000050/uni00000052/uni00000059/uni00000048/uni00000047/uni00000003/uni00000028/uni00000047/uni0000004a/uni00000048/uni00000056
(a) Comparisons of removed edges on 8 datasets
/uni00000026/uni00000055/uni00000044/uni0000005a/uni0000004f /uni0000003c/uni00000052/uni00000058/uni00000037/uni00000058/uni00000045/uni00000048 /uni0000002f/uni00000044/uni00000056/uni00000057/uni00000049/uni00000050 /uni0000003a/uni0000004c/uni0000004e/uni0000004c/uni00000053/uni00000048/uni00000047/uni0000004c/uni00000044 /uni00000035/uni00000052/uni00000044/uni00000047/uni00000051/uni00000048/uni00000057 /uni00000037/uni00000044/uni0000004f/uni0000004e /uni00000033/uni00000044/uni00000057/uni00000048/uni00000051/uni00000057 /uni0000002f/uni0000004c/uni00000059/uni00000048/uni0000004d/uni00000052/uni00000058/uni00000055/uni00000051/uni00000044/uni0000004f/uni00000013/uni00000014/uni00000015/uni00000016/uni00000017/uni00000018/uni00000019/uni0000001a/uni0000001b/uni00000037/uni0000004c/uni00000050/uni00000048/uni00000003/uni00000026/uni00000052/uni00000056/uni00000057/uni00000003/uni0000000b/uni00000056/uni00000048/uni00000046/uni00000052/uni00000051/uni00000047/uni0000000c
(b) Comparisons of time cost on 8 datasets
Fig. 4. Effectiveness and efficiency of MONA compared with Random and
Degree with the setting of b= 30 .
2
-
node
3
-
node
1
-
node
𝑢
4
𝑢
5
𝑢
6
𝑢
7
𝑢
9
𝑢
8
𝑢
10
𝑢
11
𝑢
12
𝑢
13
𝑢
15
𝑢
14
𝑢
1
𝑢
16
𝑢
17
𝑢
2
𝑢
3
𝑢
19
𝑢
20
𝑢
18
3
-
core after the collapse of 
𝒖
𝟔
 
and 
𝒖
𝟏𝟒
Original 3
-
core
Backtrack for 
𝑛
7
3
2
2
1
1
1
1
3
-
core
3
1
1
1
1
2
2
𝑛
1
𝑛
2
𝑛
7
𝑛
7
𝑛
6
𝑛
5
𝑛
4
𝑛
3
𝑛
2
𝑛
1
𝑛
3
𝑛
4
𝑛
6
𝑛
5
Optima
l
MONA
Rando
m
Degree
MONA
COREATTACK
KC
-
Edge
MONA
Rando
m
Degree
MONA
/uni00000014/uni00000013 /uni00000015/uni00000013 /uni00000016/uni00000013 /uni00000017/uni00000013 /uni00000018/uni00000013
/uni00000045/uni00000014/uni00000013/uni00000014/uni00000014/uni00000013/uni00000015/uni00000014/uni00000013/uni00000016/uni00000031/uni00000058/uni00000050/uni00000045/uni00000048/uni00000055/uni00000003/uni00000052/uni00000049/uni00000003/uni00000035/uni00000048/uni00000050/uni00000052/uni00000059/uni00000048/uni00000047/uni00000003/uni00000028/uni00000047/uni0000004a/uni00000048/uni00000056
(a) Lastfm
/uni00000014/uni00000013 /uni00000015/uni00000013 /uni00000016/uni00000013 /uni00000017/uni00000013 /uni00000018/uni00000013
/uni00000045/uni00000014/uni00000013/uni00000014/uni00000014/uni00000013/uni00000015/uni00000014/uni00000013/uni00000016/uni00000031/uni00000058/uni00000050/uni00000045/uni00000048/uni00000055/uni00000003/uni00000052/uni00000049/uni00000003/uni00000035/uni00000048/uni00000050/uni00000052/uni00000059/uni00000048/uni00000047/uni00000003/uni00000028/uni00000047/uni0000004a/uni00000048/uni00000056
 (b) Wikipedia
Fig. 5. Removed edges on Lastfm and Wikipedia with bfrom 10 to 50.
D. Scalability of MONA for Global Attack
In previous works, Zhou et al. [1] and Zhang et al. [7]
respectively designed global-perspective k-core attack meth-
ods, namely COREATTACK and KC-Edge. By increasing the
number of target nodes, we can easily extend MONA to the
realm of global attacks. To compare with COREATTACK,
we set b=|Ekmax|. And to compare with KC-Edge, we
setb=|Ekmax|and terminate MONA when the number of
removed edges reaches |E|=p= 10 . The comparative results
are shown in Figure 6. In global settings, it is evident that
2
-
node
3
-
node
1
-
node
𝑢
4
𝑢
5
𝑢
6
𝑢
7
𝑢
9
𝑢
8
𝑢
10
𝑢
11
𝑢
12
𝑢
13
𝑢
15
𝑢
14
𝑢
1
𝑢
16
𝑢
17
𝑢
2
𝑢
3
𝑢
19
𝑢
20
𝑢
18
3
-
core after the collapse of 
𝒖
𝟔
 
and 
𝒖
𝟏𝟒
Original 3
-
core
Backtrack for 
𝑛
7
3
2
2
1
1
1
1
3
-
core
3
1
1
1
1
2
2
𝑛
1
𝑛
2
𝑛
7
𝑛
7
𝑛
6
𝑛
5
𝑛
4
𝑛
3
𝑛
2
𝑛
1
𝑛
3
𝑛
4
𝑛
6
𝑛
5
Optima
l
MONA
Rando
m
Degree
MONA
COREATTACK
KC
-
Edge
MONA
/uni00000026/uni00000055/uni00000044/uni0000005a/uni0000004f /uni0000003c/uni00000052/uni00000058/uni00000037/uni00000058/uni00000045/uni00000048 /uni0000003a/uni0000004c/uni0000004e/uni0000004c/uni00000053/uni00000048/uni00000047/uni0000004c/uni00000044 /uni00000037/uni00000044/uni0000004f/uni0000004e /uni00000033/uni00000044/uni00000057/uni00000048/uni00000051/uni00000057/uni00000013/uni00000014/uni00000013/uni00000015/uni00000013/uni00000016/uni00000013/uni00000017/uni00000013/uni00000018/uni00000013/uni00000031/uni00000058/uni00000050/uni00000045/uni00000048/uni00000055/uni00000003/uni00000052/uni00000049/uni00000003/uni00000035/uni00000048/uni00000050/uni00000052/uni00000059/uni00000048/uni00000047/uni00000003/uni00000028/uni00000047/uni0000004a/uni00000048/uni00000056(a) MONA vsCOREATTACK
/uni00000026/uni00000055/uni00000044/uni0000005a/uni0000004f /uni0000003c/uni00000052/uni00000058/uni00000037/uni00000058/uni00000045/uni00000048 /uni0000003a/uni0000004c/uni0000004e/uni0000004c/uni00000053/uni00000048/uni00000047/uni0000004c/uni00000044 /uni00000037/uni00000044/uni0000004f/uni0000004e /uni00000033/uni00000044/uni00000057/uni00000048/uni00000051/uni00000057/uni00000014/uni00000013/uni00000014/uni00000014/uni00000013/uni00000015/uni00000014/uni00000013/uni00000016/uni00000031/uni00000058/uni00000050/uni00000045/uni00000048/uni00000055/uni00000003/uni00000052/uni00000049/uni00000003/uni00000035/uni00000048/uni00000050/uni00000052/uni00000059/uni00000048/uni00000047/uni00000003/uni00000028/uni00000047/uni0000004a/uni00000048/uni00000056 (b) MONA vsKC-Edge, p= 10
Fig. 6. The scalability of MONA for global attack with the comparisons of
COREATTACK and KC-Edge.
the MONA algorithm exhibits consistent effectiveness with
these global attack methods. It demonstrates the scalability of
MONA for global attack.
V. C ONCLUSION
In this paper, we propose and study TNsCP, which aims
to remove a minimal-size set of edges for the collapse of
target k-nodes. And we offer a proof of its NP-hardness. To
improve time complexity, we provide a novel algorithm named
MOD for candidate reduction. Furthermore, on the basis
of MOD, an efficient heuristic algorithm named MONA is
proposed to address TNsCP. Extensive experiments on 10 real-
world datasets demonstrate the effectiveness and scalability of
MONA compared to multiple baselines.
REFERENCES
[1] B. Zhou, Y . Lv, J. Wang, J. Zhang, and Q. Xuan, “Attacking the core
structure of complex network,” IEEE Transactions on Computational
Social Systems , pp. 1–15, 2022.
[2] C. Chen, Q. Zhu, R. Sun, X. Wang, and Y . Wu, “Edge manipulation
approaches for k-core minimization: metrics and analytics,” IEEE Trans-
actions on Knowledge and Data Engineering , vol. 35, no. 1, pp. 390–
403, 2021.
[3] S. Medya, T. Ma, A. Silva, and A. Singh, “A game theoretic approach
for core resilience,” in Proceedings of the Twenty-Ninth International
Joint Conference on Artificial Intelligence, IJCAI-20 , C. Bessiere, Ed.
International Joint Conferences on Artificial Intelligence Organization,
7 2020, pp. 3473–3479, main track.
[4] F. Zhang, Y . Zhang, L. Qin, W. Zhang, and X. Lin, “Finding critical
users for social network engagement: The collapsed k-core problem,” in
Thirty-First AAAI Conference on Artificial Intelligence , 2017.
[5] A. V . Goltsev, S. N. Dorogovtsev, and J. F. F. Mendes, “k-core
(bootstrap) percolation on complex networks: Critical phenomena and
nonlocal effects,” Physical Review E , vol. 73, no. 5, p. 056101, 2006.
[6] T. Grossman and A. Wool, “Computational experience with approxi-
mation algorithms for the set covering problem,” European Journal of
Operational Research , vol. 101, no. 1, pp. 81–92, 1997.
[7] W. Zhu, C. Chen, X. Wang, and X. Lin, “K-core minimization: An edge
manipulation approach,” in Proceedings of the 27th ACM International
Conference on Information and Knowledge Management , ser. CIKM ’18.
New York, NY , USA: Association for Computing Machinery, 2018, p.
1667–1670.
[8] A. E. Sariy ¨uce, B. Gedik, G. Jacques-Silva, K.-L. Wu, and ¨U. V .
C ¸ ataly ¨urek, “Streaming algorithms for k-core decomposition,” Proceed-
ings of the VLDB Endowment , vol. 6, no. 6, pp. 433–444, 2013.
[9] R.-H. Li, J. X. Yu, and R. Mao, “Efficient core maintenance in
large dynamic graphs,” IEEE Transactions on Knowledge and Data
Engineering , vol. 26, no. 10, pp. 2453–2465, 2013.
[10] L. H ´ebert-Dufresne, J. A. Grochow, and A. Allard, “Multi-scale structure
and topological anomaly detection via a new network statistic: The onion
decomposition,” Scientific reports , vol. 6, no. 1, pp. 1–9, 2016.
[11] R. A. Rossi and N. K. Ahmed, “The network data repository with
interactive graph analytics and visualization,” in AAAI , 2015.